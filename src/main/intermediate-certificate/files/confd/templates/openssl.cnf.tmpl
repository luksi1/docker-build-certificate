[ ca ]
default_ca = CA_default

[ crl_ext ]
authorityKeyIdentifier=keyid

[ CA_default ]
# directories
certs = /certs
crl_dir = /crl
new_certs_dir = /newcerts
database = /index.txt
serial = /serial

# root key and certificate
private_key = /private/root.key
certificate = /certs/root.crt

# CRL
crlnumber = /crlnumber
crl = /crl/ca.crl
crl_extentions = crl_ext
default_crl_days = {{ getenv "DEFAULT_CRL_DAYS" }}

# Days
default_days = {{ getenv "DEFAULT_DAYS" }}

# Allow issueing a certificate with the same common name
# This can be useful in the case that a certificate needs to be
# renewed
unique_subject = no
default_md = sha256

{{ if eq (getenv "CERTIFICATE_TYPE") "CA"}}
policy = policy_strict
{{ else }}
policy = policy_loose
{{ end }}

[ policy_strict ]
commonName = supplied
stateOrProvinceName = match
organizationName = match
countryName = match
emailAddress = optional
localityName = optional
organizationalUnitName = optional

[ policy_loose ]
commonName = supplied
stateOrProvinceName = optional
organizationName = optional
localityName = optional
countryName = optional
emailAddress = optional
organizationalUnitName = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

[ v3_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:1
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
{{ if getenv "EXTENDED_KEY_USAGE" }}
extendedKeyUsage = serverAuth,clientAuth,{{ getenv "EXTENDED_KEY_USAGE" }}
{{ else }}
extendedKeyUsage = serverAuth,clientAuth
{{ end }}
{{ if getenv "SUBJECT_ALT_NAMES" }}
subjectAltName={{ getenv "SUBJECT_ALT_NAMES" }}
{{ end }}
{{ if getenv "CRL_DISTRIBUTION_POINTS" }}
crlDistributionPoints = {{ getenv "CRL_DISTRIBUTION_POINTS" }}
{{ end }}

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
